pipeline {
  agent any
	environment { 
        mvnHome = tool 'Maven_Config'
		
		// GitHub setup
		workingGitURL= 'https://github.com/CA-MMISDigitalServices/Dev.git'     
		workingBranch= 'dockerDeploy'
		
		//POM file locations for Maven
		workingPOM = '/var/lib/jenkins/workspace/TestPipelineDocker/SpringPOC'
		
		// Jenkins setup 
		workingJob= 'TestPipelineDocker'
		workingProject= 'SpringPOC'
		workingJenkinsDir= '/var/lib/jenkins/workspace'
		
		// AWS code Deploy setup
		AWSCDapplicationName= 'SpringPOCDocker'
		AWSCDDeploymentGroupName= 'SpringPOCDockerDG'
		AWSCDSubDirectory= 'SpringPOC'
		
		// Jira project setup
		workingJiraProject ='PTP'
		
		// Docker
		workingImageName='springpoc'
		
		// email 
		workingEmailRecipients = 'randy.duart@dhcs.ca.gov'
    }
	stages {
		stage('Preparation') {
			steps {
				git url: "${workingGitURL}", branch: "${workingBranch}"
			}
		}
		stage('Build') {
            steps {
				script {
					sh "'${mvnHome}/bin/mvn' -X -B --file '${workingPOM}' -Dmaven.test.failure.ignore clean install cobertura:cobertura -Dcobertura.report.format=xml"
				}
            }
            post {
                always {
                    echo 'Build Stage always'
                }
				failure {
					echo 'Build Stage failure'
					script {
						testIssue = [fields: [ project: [key: "${workingJiraProject}"],
									summary: 'Jenkins Build Failure.',
									description: "Jenkins Build Failure -  Job name: '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'",
									priority: [name: 'Highest'],
									issuetype: [name: 'Bug']]]

						response = jiraNewIssue issue: testIssue, site: 'CAMMIS'

						echo response.successful.toString()
						echo response.data.toString()
						
						slackSend (color: '#ff1000', message: "Failed: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")

					} 
				}
				success {
					echo 'Build Stage Success'
					slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
				}	
			} 
        } 
		stage('SonarQube analysis') { 
    		steps { 
				withSonarQubeEnv('SonarQubeServer') {
					sh '/var/lib/jenkins/tools/hudson.plugins.sonar.SonarRunnerInstallation/Sonar/bin/sonar-scanner' +
					' -Dsonar.host.url=http://158.96.16.211:9000/' + 
					' -Dsonar.projectVersion=1.0' +
					' -Dsonar.sourceEncoding=UTF-8' +
					' -Dsonar.projectKey="${workingJob}"' +
					' -Dsonar.java.binaries="${workingJenkinsDir}"/"${workingJob}"/"${workingProject}"/target/classes' +
					' -Dsonar.sources="${workingProject}"/src' +
					' -Dsonar.projectBaseDir="${workingJenkinsDir}"/"${workingJob}"'
				}
			}
			post {
                always {
                    echo 'SonarQube Analysis  Done'
                }
				failure {
					echo 'SonarQube Analysis  failure'
					script {
						echo 'AWS Code Deploy  failure'
						testIssue = [fields: [ project: [key: "${workingJiraProject}"],
									summary: 'Jenkins Build Failure.',
									description: "Jenkins Build Failed - SonarQube Analysis Failed -  Job name: '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'",
									priority: [name: 'Highest'],
									issuetype: [name: 'Bug']]]

						response = jiraNewIssue issue: testIssue, site: 'CAMMIS'

						echo response.successful.toString()
						echo response.data.toString()
						
						slackSend (color: '#ff1000', message: "Failed: Job - SonarQube Analysis Failed '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
					}
				}
				success {
					echo 'SonarQube Analysis Success'
				}	
			}
		} 
    	stage('SonarQube Quality Gate') { 
			steps {
				node('master'){ 
					script {
						timeout(time: 1, unit: 'HOURS') { 
							echo '************ Inside Quality Gate'
							qualityGate = waitForQualityGate() 
							echo qualityGate.status.toString() 
							if (qualityGate.status != 'OK') {
							
								testIssue = [fields: [ project: [key: "${workingJiraProject}"],
									summary: 'Jenkins Build Failure.',
									description: "Jenkins Build Sonar Quality Gate Failure -  Job name: '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'",
									priority: [name: 'Highest'],
									issuetype: [name: 'Bug']]]

								response = jiraNewIssue issue: testIssue, site: 'CAMMIS'

								echo response.successful.toString()
								echo response.data.toString()
						
								slackSend (color: '#ff1000', message: "Failed: Job - Sonar Quality Gate Failure '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
								// Fail the build
								error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
							}
						}
					}
		}
			}
			post {
                always {
                    echo 'SonarQube Quality Gate  Done'
                }
				failure {
					echo 'SonarQube Quality Gate  failure'
				}
				success {
					echo 'SonarQube Quality Gate Success'
				}	
			}
		}
		stage('Unit Test Report') {   
            steps {
				junit '**/target/surefire-reports/*.xml'
	    	}     
        	post {
				always {
                 	echo 'always'
                }
				changed {
		 			echo 'change'
				}
				aborted {
					echo 'aborted'
				}
				failure {
					echo 'failure'
				}
				success {
					echo 'success'
				}
				unstable {
					echo 'unstable'
					sendJira("Unit Test Conditions Failed")
				}
            }
        } 
		stage('Code Coverage Report') {   
            steps {
				cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: '**/target/site/cobertura/coverage.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
	    	}
			post {
                always {
                    echo 'Code Coverage Report  Done'
                }
				failure {
					echo 'Code Coverage Report failure'
				}
				success {
					echo 'Code Coverage Report Success'
				}	
			}
		}  
/*		stage('Maven Nexus Deploy') {
			steps {
				sh "'${mvnHome}/bin/mvn' -X -B --file '${workingPOM}' -Dintegration-tests.skip=true deploy"
            }
			post {
                always {
                   echo 'Maven Nexus Deploy  Done'
                }
				failure {
					echo 'Maven Nexus Deploy  failure'
					script {
						echo 'AWS Code Deploy  failure'
						testIssue = [fields: [ project: [key: "${workingJiraProject}"],
									summary: 'Jenkins Build Failure.',
									description: "Jenkins Build Failed - Nexus Depolyment Failed -  Job name: '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'",
									priority: [name: 'Highest'],
									issuetype: [name: 'Bug']]]

						response = jiraNewIssue issue: testIssue, site: 'CAMMIS'

						echo response.successful.toString()
						echo response.data.toString()
						
						slackSend (color: '#ff1000', message: "Failed: Job - AWS Code Deploy Failed '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
					}
				}
				success {
					echo 'Maven Nexus Deploy Success'
				}	
			}
		}  */
		stage('Jira Update Issues') {
			steps {
				echo 'Jira Update Issues'
				
				step([$class: 'hudson.plugins.jira.JiraIssueUpdater', 
					issueSelector: [$class: 'hudson.plugins.jira.selector.DefaultIssueSelector'], 
					scm: [$class: 'GitSCM', branches: [[name: '*/"${workingBranch}"']], 
					userRemoteConfigs: [[url: "${workingGitURL}"]]]])
			}
			post {
                always {
					echo 'Jira Update Issues'
                }	
				failure {
					echo 'Jira Update Issues  failure'
					script {
						echo 'AWS Code Deploy  failure'
						testIssue = [fields: [ project: [key: "${workingJiraProject}"],
									summary: 'Jenkins Build Failure.',
									description: "Jenkins Build Failed - Jira Update Issues Failed-  Job name: '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'",
									priority: [name: 'Highest'],
									issuetype: [name: 'Bug']]]

						response = jiraNewIssue issue: testIssue, site: 'CAMMIS'

						echo response.successful.toString()
						echo response.data.toString()
						
						slackSend (color: '#ff1000', message: "Failed: Job - Jira Update Issues '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
					}
				}
				success {
					echo 'Jira Update Issues Success'
				}
			}		
		} 
		stage('Security Dependency Check Publisher') {
			steps {
//				node('DependencyCheckNode'){ 
					echo 'Security Dependency Check'
					dependencyCheckAnalyzer datadir: '', hintsFile: '', includeCsvReports: false, includeHtmlReports: false, includeJsonReports: false, includeVulnReports: false, isAutoupdateDisabled: false, outdir: '', scanpath: '', skipOnScmChange: false, skipOnUpstreamChange: false, suppressionFile: '', zipExtensions: ''
				
//					stash (includes: "dependency-check-report.xml", name: "dependency-check-report")
//				}
			}
			post {
				always {
					echo 'Security Dependency Check'
				}	
				failure {
					script {
						echo 'Security Dependency Check  failure'
						testIssue = [fields: [ project: [key: "${workingJiraProject}"],
							summary: 'Jenkins Build Failure.',
							description: "Jenkins Build Failed - Security Dependency Check -  Job name: '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'",
							priority: [name: 'Highest'],
							issuetype: [name: 'Bug']]]

						response = jiraNewIssue issue: testIssue, site: 'CAMMIS'

						echo response.successful.toString()
						echo response.data.toString()
				
						slackSend (color: '#ff1000', message: "Failed: Job - Security Dependency Check '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
					}
				}
				success {
					echo 'Security Dependency Check Success'
				}
			}
		}	
		stage('Security Dependency Publisher') {
			steps {
				echo 'Security Dependency Check'			
				
//				unstash "dependency-check-report"
				
				dependencyCheckPublisher canComputeNew: false, defaultEncoding: '', healthy: '', pattern: '', unHealthy: ''
			}
			post {
                always {
					echo 'Security Dependency Publisher'
                }	
				failure {
					script {
						echo 'Security Dependency Publisher  failure'
						testIssue = [fields: [ project: [key: "${workingJiraProject}"],
									summary: 'Jenkins Build Failure.',
									description: "Jenkins Build Failed - Security Dependency Check -  Job name: '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'",
									priority: [name: 'Highest'],
									issuetype: [name: 'Bug']]]

						response = jiraNewIssue issue: testIssue, site: 'CAMMIS'

						echo response.successful.toString()
						echo response.data.toString()
						
						slackSend (color: '#ff1000', message: "Failed: Job - Security Dependency Publisher '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
					}
				}
				success {
					echo 'Security Dependency Publisher Success'
				}
			}
		} 
		stage('Docker Build Image') {
			steps {
				script {
					echo 'Docker Build'
					sh "pwd" 
					
					// Remove all docker images from local repos.
					def COUNT = sh returnStdout: true, script: "docker images | grep ${workingImageName} | wc -l"

					echo "Image count : ${COUNT}" 
					
					def intValue = COUNT.toInteger()
					if ((intValue > 0)) {
						echo 'Images exist -- Removing Images'
						sh 'docker rmi $(docker images -q)'
					}
				
					// Setup version tag.
					def pom = readMavenPom file: "${workingJenkinsDir}/${workingJob}/${workingProject}/pom.xml"
					def version = pom.version.replace("-SNAPSHOT", ".${currentBuild.number}")
					echo "version : ${version}"
					
					def (major, minor, increment, buildnum) = version.tokenize('.')
					echo  "After tokenize major ${major}"

					def tagVersion = major + '.' + minor + '.' + increment + '.SNAPSHOT'
						echo "tagVersion :  ${tagVersion}"
				
					sh "docker build -f SpringPOC/Dockerfile  -t trinitytg/springpoc:${tagVersion} /var/lib/jenkins/workspace/TestPipelineDocker/SpringPOC"
				}
			}
			post {
				always {
					echo 'Docker Build'
				}
				failure {	
					echo 'Failure Docker Build'				
				}
				success {
					echo 'Success Docker Build'
				}
			}
		}
		stage('Docker Push') {
			steps {
				withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'dockerhubPassword', usernameVariable: 'dockerhubUser')]) {
					script {
					
						echo "hubuser : ${env.dockerhubUser}" 
						echo "hubpass : ${env.dockerhubPassword}" 
					
						// Setup version tag.
						def pom = readMavenPom file: "${workingJenkinsDir}/${workingJob}/${workingProject}/pom.xml"
						def version = pom.version.replace("-SNAPSHOT", ".${currentBuild.number}")
						echo "version : ${version}"
					
						def (major, minor, increment, buildnum) = version.tokenize('.')
						echo  "After tokenize major ${major}"

						def tagVersion = major + '.' + minor + '.' + increment + '.SNAPSHOT'
						echo "tagVersion :  ${tagVersion}"
						
						_cdir="${workingJenkinsDir}/${workingJob}/${workingProject}/scripts"
						echo "working dir is : $_cdir"
					
						// Replace contents for startup script.
//						sh "sed -i -e 's/dummyUser/${env.dockerhubUser}/g' '$_cdir/startup.sh'"
//						sh "sed -i -e 's/dummyPass/${env.dockerhubPassword}/g' '_cdir/startup.sh'"
//						sh "sed -i -e 's/dummyTag/${tagVersion}/g' '$_cdir/startup.sh'"

//						sh "docker commit -m 'Updated springpoc' -a 'Jenkins Build' springpoc trinitytg/springpoc:${tagVersion}"
						
//						sh "docker tag springpoc trinitytg/springpoc:${tagVersion}"
					
						sh "docker login -u ${env.dockerhubUser} -p ${env.dockerhubPassword}"
						
						sh "docker push trinitytg/springpoc:${tagVersion}"
//						sh "docker push trinitytg/springpoc"
					}
				}
			}
			post {
                always {
					echo 'Docker Push'
                }
				failure {	
					echo 'Failure Docker Push'				
				}
				success {
					echo 'Success Docker Push'
				}
			}	
		}
		stage('AWS Code Deploy') {
			steps {
				echo 'AWS Code Deploy'
				echo "env.AWS_ACCESS_KEY_ID :" + env.AWS_ACCESS_KEY_ID
				echo "env.AWS_SECRET_ACCESS_KEY :" + env.AWS_SECRET_ACCESS_KEY
				
				step([$class: 'AWSCodeDeployPublisher', 
						applicationName: "${AWSCDapplicationName}",
						awsAccessKey: env.AWS_ACCESS_KEY_ID,
						awsSecretKey: env.AWS_SECRET_ACCESS_KEY, 
						credentials: 'awsAccessKey', 
						deploymentConfig: 'CodeDeployDefault.OneAtATime', 
						deploymentGroupAppspec: false, 
						deploymentGroupName: "${AWSCDDeploymentGroupName}", 
						deploymentMethod: 'deploy', 
						excludes: 'target/**, src/**, .settings/**', 
						iamRoleArn: '', 
						includes: '**', 
						pollingFreqSec: 15, 
						pollingTimeoutSec: 300, 
						proxyHost: '', 
						proxyPort: 0, 
						region: 'us-gov-west-1', 
						s3bucket: 'codedeploybucket', 
						s3prefix: '', 
						subdirectory: "${AWSCDSubDirectory}",
						versionFileName: '', 
						waitForCompletion: true])
			
			}
			post {
                always {
					echo 'AWS Code Deploy'
                }	
				failure {
					script {
						echo 'AWS Code Deploy  failure'
						testIssue = [fields: [ project: [key: "${workingJiraProject}"],
									summary: 'Jenkins Build Failure.',
									description: "Jenkins Build Failed - AWS Code Deploy Failed-  Job name: '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'",
									priority: [name: 'Highest'],
									issuetype: [name: 'Bug']]]

						response = jiraNewIssue issue: testIssue, site: 'CAMMIS'

						echo response.successful.toString()
						echo response.data.toString()
						
						slackSend (color: '#ff1000', message: "Failed: Job - AWS Code Deploy Failed '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
						
//						sendEmail("Failed");
					}
				}
				success {
					echo 'AWS Code Deploy Success'
//					slackSend (color: '#00FF00', message: "Code Deploy SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
					semdSlack("#08ff00", "Code Deploy SUCCESSFUL")
//					sendEmail("Successful")
				}
			}		
		}
		stage('Performance Testing') {
			steps {
				node('DependencyCheckNode'){ 
					echo 'Performance Testing'
					sh "/var/lib/apache-jmeter-4.0/bin/jmeter -n -j jmeter.save.saveservice.output_format=xml -t /var/lib/apache-jmeter-4.0/TTGUIScript.jmx -l /var/lib/jenkins/workspace/JMeter/TTGUILog.jtl"
					}
			}
			post {
                always {
					echo 'Performance Testing Check'
                }	
				failure {
					echo 'Performance TestingCheck'
					sendJira("Unit Test Conditions Failed")
				}
				success {
					echo 'Performance Testing Check Success'
				}
			}
		}
		stage('Performance Testing Report') {
			steps {
				node('DependencyCheckNode'){ 
					echo 'Performance Testing Report'
					perfReport modePerformancePerTestCase: true, modeThroughput: true, percentiles: '0,50,90,100', sourceDataFiles: '/var/lib/jenkins/workspace/JMeter/TTGUILog.jtl'
					}
			}
			post {
                always {
					echo 'Performance Testing Report Check'
                }	
				failure {
					echo 'Performance Testing Report Check'
					sendJira("Performance Test report Failure")
				}
				success {
					echo 'Performance Testing Report Check Success'
				}
			}
		}
		stage('Run Browser testing') {
            parallel {
                stage('Windows IE Testing') {
                    agent {
                        label "DependencyCheckNode"
                    }
                    steps {
                        sh "ls"
                    }
                    post {
                        always {
                            echo 'Windows IE Testing'
                        }
                    }
                }
                stage('Windows Chrome Testing') {
                    agent {
                        label "DependencyCheckNode"
                    }
                    steps {
                        sh "ls"
                    }
                    post {
                        always {
                            echo 'Windows Chrome Testing'
                        }
                    }
                }
				stage('Windows Firefox Testing') {
                    agent {
                        label "DependencyCheckNode"
                    }
                    steps {
                        sh "ls"
                    }
                    post {
                        always {
                            echo 'Windows Firefox Testing'
                        }
                    }
                }
            }
        }
		stage('Clean Up') {
			steps {
				cleanWs notFailBuild: true
			}
			post {
                always {
					echo 'Clean Up'
                }	
				failure {
					echo 'Clean Up'
					sendJira("Clean Up Failure")
				}
				success {
					echo 'Clean Up Success'
				}
			}
		} 
	}
}


def getChangeString() {
    MAX_MSG_LEN = 100
    def changeString = ""

    echo "Gathering SCM changes"
    def changeLogSets = currentBuild.changeSets
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            truncated_msg = entry.msg.take(MAX_MSG_LEN)
            changeString += " - ${truncated_msg} [${entry.author}]\n"
        }
    }

    if (!changeString) {
        changeString = " - No new changes"
    }
    return changeString
}

def sendEmail(status) {
 		
	emailext (
			attachLog: true,
			to: "${workingEmailRecipients}",
			from: "Jenkins.Admin@dhcs.ca.gov",
			subject: "Build ${env.BUILD_NUMBER} - " + status + " ${env.BUILD_NUMBER}",
			body: "Changes:\n " + getChangeString() + "\n\n Check console output at: ${env.BUILD_URL}" + "\n")

			
}

def sendJira(message){

	echo 'Send Jira Message'
	testIssue = [fields: [ project: [key: "${workingJiraProject}"],
			summary: 'Jenkins Build Failure.',
			description: "Jenkins -  " + message + " - " + "Job name: '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'",
			priority: [name: 'Highest'],
			issuetype: [name: 'Bug']]]

	response = jiraNewIssue issue: testIssue, site: 'CAMMIS'

	echo response.successful.toString()
	echo response.data.toString()
						
	slackSend (color: '#FFFF00', message: "Failed: " + message + " - " + "'${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'")
}

def sendSlack(color, message) {

	slackSend (color: color, message: message + " - Job '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'")
}

