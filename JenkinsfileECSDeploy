/*	Jenkins pipeline to Deploy Docker images to ECS. 

	
	-- Environment parameters need to be adjusted for this script to work for a different build.
	
	
		ECR and ECS Choice parameters that need to be created
		 
			Select "This project is parameterized"  Main project configuration screen
			Select "Add parameters"
			Select "String Parameters"   
		 	For Name enter FAMILY
			For Default Value enter springpoctask
			Use the list below to build the Name and Default Values
		
				FAMILY='springpoctask'
				CONTAINERNAME='springpoctask'
				SERVICE_NAME='springpocservicename'
				CLUSTER='SpringPOCECSCluster'
				CONTAINERPORT='8080'
				HOSTPORT='8888'
				REPOSITORY_NAME='springpoc'

		 	For TAGVERSION a script needs to be ran to get the list of Tags from the repository.
			Select "Add parameters"
			Select Extended Choice Parameters
			For Name enter TAGVERSION
			
			TAGVERSION="1.0.2-SNAPSHOT.137"
			
			Select Groovy Script and copy for following script.
			Change the <repository name> in the first line in the Groovy script
			
			def cmd = 'aws ecr list-images  --repository-name <repository name> --region us-gov-west-1'
			def sout = new StringBuffer(), serr = new StringBuffer()
			def proc = cmd.execute()
			proc.consumeProcessOutput(sout, serr)
			proc.waitForOrKill(1000)
			def fileName = "a.out"
			def inputFile = new File("/var/lib/jenkins/workspace/" + fileName)
			inputFile.write(sout.toString())
			def cmd1 = 'jq .imageIds[].imageTag  /var/lib/jenkins/workspace/a.out'
			def sout1 = new StringBuffer(), serr1 = new StringBuffer()
			def proc1 = cmd1.execute()
			proc1.consumeProcessOutput(sout1, serr1)
			proc1.waitForOrKill(1000)
			def str = sout1.toString().replaceAll('\\"',',')
			def str1 = str.replaceAll('\\\n','')
			return[str1]		
		
*/

pipeline {
  agent any
	environment { 
        mvnHome = tool 'Maven_Config'
		
		//
		// These parameters need to be updated for each new project.
		//
		
		// email 
		workingEmailRecipients = 'DHCSJenkinGroup@dhcs.ca.gov'
		
		// Failed aMaeeage field
		failedMessage = 'test message'
		
		// Default region for GovCloud
		REGION='us-gov-west-1'
		
    }
	stages {
		stage('Preparation') {
			steps {
			echo 'Prep'
			}
		}
		stage('ECS Deploy') {
			steps {
				script {
					
					echo "TAGVERSION : ${TAGVERSION}" + "<"
					
				echo '1'
					// Login into ECR
					sh "aws ecr get-login --no-include-email --region us-gov-west-1 > ecrlogin"
			
					// Change persmision and execute the login script from above get-login command 
					sh "chmod 755 ecrlogin"
					sh "./ecrlogin"
					
				echo '2'
			    	//Store the repositoryUri as a variable 
			    	def REPOSITORY_URI_TEMP= sh returnStdout: true, script: "aws ecr describe-repositories --repository-names ${REPOSITORY_NAME} --region ${REGION} | jq .repositories[].repositoryUri | tr -d '\n' "
					echo "respository_URI_TEMP:${REPOSITORY_URI_TEMP}" + "<"
					
					def REPOSITORY_URI = REPOSITORY_URI_TEMP.toString().replaceAll('\\"','')		
					echo "respository_URI :${REPOSITORY_URI}" + "<"

                echo '6'
					// Download the taskdef.json from S3
					sh "aws s3 cp s3://environmentscripts/dockerbuildscripts/taskdef.json taskdef.json --region us-gov-west-1"
				
                    // Replace the variables in in the taskdef.json file.
			    	sh "sed -e 's;%BUILD_NUMBER%;${TAGVERSION};g' -e 's;%REPOSITORY_URI%;${REPOSITORY_URI};g' -e 's;%FAMILY%;${FAMILY};g' -e 's;%NAME%;${CONTAINERNAME};g' -e 's;%CONTAINERPORT%;${CONTAINERPORT};g' -e 's;%HOSTPORT%;${HOSTPORT};g' taskdef.json > ${CONTAINERNAME}-${tagVersion}.json"

				echo '7'
                    // Register the task definition in the repository
				    sh "aws ecs register-task-definition --family ${FAMILY} --cli-input-json file://${WORKSPACE}/${CONTAINERNAME}-${TAGVERSION}.json --region ${REGION}"

				    def SERVICES= sh returnStdout: true, script:"aws ecs describe-services --services ${SERVICE_NAME} --cluster ${CLUSTER} --region ${REGION} | jq .failures[] | tr -d '\n'"
					echo " Services: ${SERVICES}" + "<"
					
				echo '8'
			    	//Get latest revision
				    def REVISION= sh returnStdout: true, script: "aws ecs describe-task-definition --task-definition ${FAMILY} --region ${REGION} | jq .taskDefinition.revision | tr -d '\n'"
					echo "Reversion: ${REVISION}" + "<"
				
				echo '9'
	                // Create or update service
				    if ( SERVICES == "" ) {
					    echo "entered existing service"
					    def DESIRED_COUNT= sh returnStdout: true, script: "aws ecs describe-services --services ${SERVICE_NAME} --cluster ${CLUSTER} --region ${REGION} |  jq .services[].desiredCount | tr -d '\n'"
						echo "Desired_Count: ${DESIRED_COUNT}" + "<"
						
				    	if ( DESIRED_COUNT == "0" ) {
					    	DESIRED_COUNT="1"
				    	}
						echo "Update existing service"
						sh "aws ecs update-service --cluster ${CLUSTER} --region ${REGION} --service ${SERVICE_NAME} --task-definition ${FAMILY}:${REVISION} --desired-count ${DESIRED_COUNT}"
				    
					} else {      
					
				    	echo "Create new service"
				    	sh "aws ecs create-service --service-name ${SERVICE_NAME} --desired-count 1 --task-definition ${FAMILY} --cluster ${CLUSTER} --region ${REGION}"
				    } 
				}	
			}
			post {
				always {
					echo 'ECS Deploy'
				}
				failure {
					script {
						echo 'Docker Step failed'	
//						sendJira("Docker Step failed")
						failedMessage = 'ECS Deploy failed'
					}
				}
				success {
					echo 'Success ECS Deploy'
				}
			}
		}
	}
}


// Function defined.

// Get status for Email.
def getChangeString() {
    MAX_MSG_LEN = 100
    def changeString = ""

    echo "Gathering SCM changes"
    def changeLogSets = currentBuild.changeSets
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            truncated_msg = entry.msg.take(MAX_MSG_LEN)
            changeString += " - ${truncated_msg} [${entry.author}]\n"
        }
    }

    if (!changeString) {
        changeString = " - No new changes"
    }
    return changeString
}

//Send Email 
def sendEmail(status) {
 		
	emailext (
			attachLog: true,
			to: "${workingEmailRecipients}",
			from: "Jenkins.Admin@dhcs.ca.gov",
			subject: "Build ${env.BUILD_NUMBER} - " + status + " ${env.BUILD_NUMBER}",
			body: "Changes:\n " + getChangeString() + "\n\n Check console output at: ${env.BUILD_URL}" + "\n")

			
}

// Open issues with JIRA.
def sendJira(message){

	echo 'Send Jira Message'
	testIssue = [fields: [ project: [key: "${workingJiraProject}"],
			summary: 'SpringPOC Build : ',
			description: "Jenkins -  " + message + " - " + "Job name: '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'",
			priority: [name: 'Highest'],
			issuetype: [name: 'Bug']]]

	response = jiraNewIssue issue: testIssue, site: 'CAMMIS'

	echo response.successful.toString()
	echo response.data.toString()
	
	sendSlack("#FFFF00'", message)
}

// Send a message to Slack
def sendSlack(color, message) {

	slackSend (color: color, message: message + " - Job '${env.JOB_NAME} - Build Number: ${env.BUILD_NUMBER}  URL: ${env.BUILD_URL}'")
}
